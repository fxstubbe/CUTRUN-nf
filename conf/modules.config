/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    // withName: 'FASTQC' {
    //    // ext.args = '--quiet'
    //     publishDir = [
    //         path: { "${params.outdir}/01_QC/fastqc" },
    //         mode: params.publish_dir_mode,
    //         saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    //     ]
    // }

    // ####################################################################################
    // QC modules
    // ####################################################################################
    
    withName: 'TRIMGALORE' {
            publishDir = [
                path: { "${params.outdir}/01_QC/trimgalore" },
                mode: "${params.publish_dir_mode}",
                pattern: '*.report.txt'
            ]
    }

      withName: 'MULTIQC' {
        ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
        publishDir = [
            path: { "${params.outdir}/01_QC/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // ####################################################################################
    // Aligner modules 
    // ####################################################################################

        withName: 'BOWTIE2_TARGET_ALIGN' {
            ext.args   = { params.end_to_end ? '--end-to-end --very-sensitive --no-mixed --no-discordant --phred33 --minins 10 --maxins 700 --dovetail' : '--local --very-sensitive --no-mixed --no-discordant --phred33 --minins 10 --maxins 700 --dovetail' }
            publishDir = [
                [
                    path: { "${params.outdir}/02_alignment/${params.genome}/log" },
                    mode: "${params.publish_dir_mode}",
                    pattern: '*.log'
                ],
                [
                    path: { "${params.outdir}/02_alignment/${params.genome}/BAM" },
                    mode: "${params.publish_dir_mode}",
                    pattern: '*.bam', 
                    enabled: ( params.save_bam_unsorted)//|| (!params.run_read_filter && !params.run_mark_dups && !params.run_remove_dups) )
                ],

                [
                    path: { "${params.outdir}/02_alignment/${params.genome}/unmapped" },
                    mode: "${params.publish_dir_mode}",
                    pattern: '*.fastq.gz',
                    enabled: params.save_unmapped_reads
                ]
            ]
        }
        withName: 'BOWTIE2_SPIKEIN_ALIGN' {
            ext.args   = { params.end_to_end ? '--end-to-end --very-sensitive --no-mixed --no-discordant --phred33 --minins 10 --maxins 700 --dovetail' : '--local --very-sensitive --no-mixed --no-discordant --phred33 --minins 10 --maxins 700 --dovetail' }
            publishDir = [
                [
                    path: { "${params.outdir}/02_alignment/${params.spike_genome}/log" },
                    mode: "${params.publish_dir_mode}",
                    pattern: '*.log'
                ],
                
                [
                    path: { "${params.outdir}/02_alignment/${params.spike_genome}/BAM/" },
                    mode: "${params.publish_dir_mode}",
                    pattern: '*.bam',
                    enabled: ( params.save_bam_spikein_aligned )//|| (!params.run_read_filter && !params.run_mark_dups && !params.run_remove_dups) )
                ]
            ]
        }

        // ####################################################################################
        // Parameters for Subworflow samtools_sort_stats_samtools
        // #############################################################################################

            withName: 'SAMTOOLS_SORT' {
            ext.prefix = { "${meta.id}.${params.genome}.sorted" }
            publishDir = [
                path: { "${params.outdir}/02_alignment/${params.genome}/BAM" },
                mode: "${params.publish_dir_mode}",
                pattern: "*.bam",
                //enabled: ( params.save_align_intermed || (!params.run_read_filter && !params.run_mark_dups && !params.run_remove_dups) )
                enabled: ( params.save_bam_sorted)            
            ]
        }

            withName: 'SAMTOOLS_INDEX' {
            ext.prefix = { "${meta.id}.${params.genome}.sort" }
            publishDir = [
                path: { "${params.outdir}/02_alignment/${params.genome}/BAM" },
                mode: "${params.publish_dir_mode}",
                pattern: "*.bai",
                //enabled: ( params.save_align_intermed || (!params.run_read_filter && !params.run_mark_dups && !params.run_remove_dups) )
                enabled: ( params.save_bam_sorted)            
            ]
        }

            withName: 'SAMTOOLS_STATS' {
            ext.prefix = { "${meta.id}.${params.genome}.sort" }
            publishDir = [
                path: { "${params.outdir}/02_alignment/${params.genome}/log" },
                mode: "${params.publish_dir_mode}",
                pattern: "*.stats",
                enabled: ( params.save_bam_sorted_stats)            
            ]
        }
            withName: 'SAMTOOLS_FLAGSTAT' {
            ext.prefix = { "${meta.id}.${params.genome}.sort" }
            publishDir = [
                path: { "${params.outdir}/02_alignment/${params.genome}/log" },
                mode: "${params.publish_dir_mode}",
                pattern: "*.flagstat",
                enabled: ( params.save_bam_sorted_stats)            
            ]
        }
            withName: 'SAMTOOLS_IDXSTATS' {
            ext.prefix = { "${meta.id}.${params.genome}.sort" }
            publishDir = [
                path: { "${params.outdir}/02_alignment/${params.genome}/log" },
                mode: "${params.publish_dir_mode}",
                pattern: "*.idxstats",
                enabled: ( params.save_bam_sorted_stats)            
            ]
        }
        // ####################################################################################
        // PICARD : Remove duplicates  
        // --> Should only be done on CONTROL samples
        // One may also do it if lots of duplicates are expected
        // Indeed, in CR, many reads will have the same start position, so removing duplicates will remove a lot of reads
        // #############################################################################################

    //     withName: 'PICARD_MARKDUPLICATES' {
    //     ext.args = { params.remove_duplicates ? '--REMOVE_DUPLICATES false' : '' }
    //     ext.prefix = { "${meta.id}.${params.genome}.picard" }

    //     publishDir = [
            
    //             path: { "${params.outdir}/03_markduplicates/${params.genome}/BAM" },
    //             mode: "${params.publish_dir_mode}",
    //             pattern: '*.bam',
    //             enabled: true
    //         ],
    //         [
    //             path: { "${params.outdir}/03_markduplicates/${params.genome}/metrics" },
    //             mode: "${params.publish_dir_mode}",
    //             pattern: '*.metrics.txt',
    //             enabled: true
    //         ]
    //     ]
    // }
    //     withName: 'PICARD_ADDORREPLACEREADGROUPS' {
    //     ext.args = { params.remove_duplicates ? '--RGID 4 --RGLB lib1 --RGPL illumina  --RGPU unit1 --RGSM 20' : '' }
    //     ext.prefix = { "${meta.id}.${params.genome}.marked" }
    //     }


        // ####################################################################################
        // SAMTOOLS VIEW: Read filtering
        // #############################################################################################

        withName: 'SAMTOOLS_VIEW' {
            // BAM flags:
            // -b                        → output BAM
            // -q ${params.minimum_alignment_q_score} → filter low MAPQ
            // -f 0x002                  → keep only properly paired reads
            // -F 0x904                  → exclude unmapped (0x004), secondary (0x100), supplementary (0x800) reads
            ext.args = "-b -q ${params.minimum_alignment_q_score} -f 0x002 -F 0x904"

            // Optional mitochondrial filtering
            if (params.mito_name == null && params.genome == null) {
                ext.args2 = ''
            } else if (params.mito_name == null) {
                ext.args2 = { params.remove_mitochondrial_reads ? "-e 'rname != \"${params.genomes[params.genome]['mito_name']}\"'" : '' }
            } else {
                ext.args2 = { params.remove_mitochondrial_reads ? "-e 'rname != \"${params.mito_name}\"'" : '' }
            }  // <-- Added missing brace and semicolon

            // Combine ext.args and ext.args2
            ext.args_combined = { "${ext.args} ${ext.args2}".trim() }

            // Output prefix
            ext.prefix = { "${meta.id}.${params.genome}.filtered" }

            // Publish filtered BAMs
            publishDir = [
                path: { "${params.outdir}/02_alignment/${params.genome}/BAM" },
                mode: "${params.publish_dir_mode}",
                pattern: "*.bam",
                enabled: true
            ]
        }



            withName:  ".*:SAMTOOLS_VIEW_SORT:SAMTOOLS_SORT"  {
            ext.prefix = { "${meta.id}.${params.genome}.filter.sort" }
            publishDir = [
                path: { "${params.outdir}/02_alignment/${params.genome}/BAM" },
                mode: "${params.publish_dir_mode}",
                pattern: "*.bam",
                //enabled: ( params.save_align_intermed || (!params.run_read_filter && !params.run_mark_dups && !params.run_remove_dups) )
                enabled: true           
            ]
        }

            withName: ".*:SAMTOOLS_VIEW_SORT:SAMTOOLS_INDEX" {
            ext.prefix = { "${meta.id}.${params.genome}.filter.sort" }
            publishDir = [
                path: { "${params.outdir}/02_alignment/${params.genome}/BAM" },
                mode: "${params.publish_dir_mode}",
                pattern: "*.bai",
                //enabled: ( params.save_align_intermed || (!params.run_read_filter && !params.run_mark_dups && !params.run_remove_dups) )
                enabled: ( params.save_bam_sorted)            
            ]
        }

            withName: ".*:SAMTOOLS_VIEW_SORT:BAM_STATS_SAMTOOLS:SAMTOOLS_STATS" {
            ext.prefix = { "${meta.id}.${params.genome}.filter.sort" }
            publishDir = [
                path: { "${params.outdir}/02_alignment/${params.genome}/log" },
                mode: "${params.publish_dir_mode}",
                pattern: "*.stats",
                enabled: ( params.save_bam_sorted_stats)            
            ]
        }
            withName: ".*:SAMTOOLS_VIEW_SORT:BAM_STATS_SAMTOOLS:SAMTOOLS_FLAGSTAT" {
            ext.prefix = { "${meta.id}.${params.genome}.filter.sort" }
            publishDir = [
                path: { "${params.outdir}/02_alignment/${params.genome}/log" },
                mode: "${params.publish_dir_mode}",
                pattern: "*.flagstat",
                enabled: ( params.save_bam_sorted_stats)            
            ]
        }
            withName: ".*:SAMTOOLS_VIEW_SORT:BAM_STATS_SAMTOOLS:SAMTOOLS_IDXSTATS" {
            ext.prefix = { "${meta.id}.${params.genome}.filter.sort" }
            publishDir = [
                path: { "${params.outdir}/02_alignment/${params.genome}/log" },
                mode: "${params.publish_dir_mode}",
                pattern: "*.idxstats",
                enabled: ( params.save_bam_sorted_stats)            
            ]
        }

        // ####################################################################################
        // Read Normalization
        // #############################################################################################

            withName: 'BEDTOOLS_COVERAGE' {
             ext.prefix = { "${meta.id}_${splitsize}_windows" }
            // ext.prefix = { meta, bed, bam ->
            //     def fname = bed.getSimpleName().replaceFirst(/\.bed$/, '')
            //     def bin_name = fname.contains('_') ? fname.split('_')[0] : fname
            //     return "${meta.id}_${bin_name}_windows"
            // }

            publishDir = [
                path: { "${params.outdir}/02_alignment/BED" },
                mode: "${params.publish_dir_mode}",
                pattern: "*.bed",
                enabled: true     
            ]
    }


        withName: 'BEDTOOLS_GENOMECOV' {
            ext.prefix = { "${meta.id}.spikein" }
            ext.args = params.extend_fragments ? '-bg -pc' : '-bg'
            publishDir = [
                path: { "${params.outdir}/03_Norm/bedgraph/" },
                mode: "${params.publish_dir_mode}",
                pattern: "*.bedgraph",
                enabled: true     
            ]
    }

            withName: 'DEEPTOOLS_BAMCOVERAGE' {
            ext.args   = [
                '--outFileFormat bigwig',
                '--skipNAs',
                "--binSize ${params.normalisation_binsize}",
                "--normalizeUsing ${params.normalisation_mode}",
                params.extend_fragments ? '--extendReads' : '',
            ].join(' ').trim()
            ext.prefix = { "${meta.id}.${params.normalisation_mode}" }
            publishDir = [
                path: { "${params.outdir}/03_Norm/bedgraph/" },
                mode: "${params.publish_dir_mode}",
                pattern: "*.bigWig",
                enabled: true     
            ]
    }


        withName: 'WriteScaleFactors' {
            publishDir = [
            path: "${params.outdir}",
            mode: 'copy'
            ]
    }

        withName: 'SEACR_CALLPEAK' {
            ext.args   = "${params.seacr_norm} ${params.seacr_stringent}"
            ext.prefix = { "${meta.id}.seacr.peaks" }
            publishDir = [
                path: { "${params.outdir}/04_PeakCalling/SEACR" },
                mode: "${params.publish_dir_mode}",
                pattern: "*.bed",
                enabled: true
            ]
        }


        // ####################################################################################
        // Fragment length distribution
        // #############################################################################################

    withName: 'FRAGMENT_LEN' {
            ext.args     = "-F 0x04"
            ext.args2    = "awk -F'\\t' 'function abs(x){return ((x < 0.0) ? -x : x)} {print abs(\$9)}' | sort -T '.' | uniq -c | awk -v OFS=\"\\t\" '{print \$2, \$1/2}'"
            ext.suffix   = ".frags.len"
            publishDir   = [
                path: { "${params.outdir}/01_QC/Fragments_length_fromBAM" },
                mode: "${params.publish_dir_mode}",
                pattern: "*.txt",
                enabled: true
            ]
        }

}


