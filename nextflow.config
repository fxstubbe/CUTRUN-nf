profiles {
    my_laptop {
        process.executor = "local"
        conda.enabled = true
        process.resourceLimits = [
            cpus: 8,
            memory: 12.GB,
            time: 24.hours
        ]

    }

    my_tower {
        process.executor = "local"
        docker.enabled = true
        // Set a cap to prevent Nextflow from using more resources than available on system
        process.resourceLimits = [ 
            cpus: 28,
            memory: 20.GB,
            time: 24.hours
        ]
        params.igenomes_base = '/mnt/d/CR_igenomes'
    }
}

// Default configuration for processes
// process {
//     // Default executor and CPU limit
//     executor = 'local'
//     cpus = 8
// }


// -----------------------------------
//
// Pipeline Parameters
//
// -----------------------------------


params {

    //On my mac
    metadata = './assets/CR_1_metadata_mac_short.csv'
    outdir = '/Users/stubbe/Desktop/CR_2_output'

    // On my tower
    //metadata = './assets/CR_1_short.csv'
    // outdir = "/mnt/d/CR_output"


    // MultiQC
    multiqc_title = 'Report_Summary_multiqc'
    dump_scale_factors = false

    // Genome
    igenomes_base = '/Users/stubbe/Desktop/Ressources/NGS/igenomes'
    genome = 'WBcel235' // Make sure the params.genomes_base is properly defined
    spike_genome = 'EB1'

    publish_dir_mode = 'copy'

    // Alignment
    end_to_end = true // End-to-end alignment

    // Bowtie alignment parameters
    save_bam_unsorted = true // Enable to save unsorted bam
    save_unmapped_reads = false // Enable to save unmapped reads to the target genome

    spike_align = false
    save_bam_pikein_aligned = false
    // Sorted BAM
    save_bam_sorted = true // Enable to save sorted bam
    save_bam_sorted_index = false // Enable to save sorted bam index
    save_bam_sorted_stats = false // Enable to save sorted bam stats
    remove_duplicates = false

    // Read filtering
    minimum_alignment_q_score = 30 // Minimum alignment q-score for reads to be kept
    remove_mitochondrial_reads = true // Remove mitochondrial reads from the target genome
    mito_name = null // Mitochondrial name, if not provided, it will be taken from the genome config

    // Read Normalisation
    normalisation_mode = 'CPM' // Normalisation mode for the data, can be 'none', 'RPKM', 'RPM', 'CPM', 'TMM', 'DESeq2', 'edgeR'
    normalisation_binsize = 50
    normalisation_c = 10000
    igg_scale_factor = 0.5

    // Peak Calling
    run_peak_calling = true // Enable to run peak calling
    use_control = true
    only_peak_calling = false
    extend_fragments = true
    seacr_norm = 'non' // can be 'non' or 'norm' (since bw are CPM normalised, it is not recommended to use 'norm')
    seacr_stringent = 'stringent' // can be 'stringent', 'relaxed'
    seacr_peak_threshold = 0.05

    // Fragment length Reporting
    fragment_len_reporting = true
}

includeConfig 'conf/igenomes.config'
includeConfig 'conf/modules.config'




// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max (obj, type) {
    def limits = workflow.config.process.resourceLimits ?: [:]

    switch(type) {
        case "memory":
            def max_mem = limits.memory ?: obj
            return obj > max_mem ? max_mem : obj

        case "time":
            def max_time = limits.time ?: obj
            return obj > max_time ? max_time : obj

        case "cpus":
            def max_cpus = limits.cpus ?: obj
            return obj > max_cpus ? max_cpus : obj

        default:
            return obj
    }
}

includeConfig 'conf/resources.config'